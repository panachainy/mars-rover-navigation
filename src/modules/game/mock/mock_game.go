// Code generated by MockGen. DO NOT EDIT.
// Source: game.go

// Package mock is a generated GoMock package.
package mock

import (
	model "mars-rover-navigation/src/model"
	game "mars-rover-navigation/src/modules/game"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGame is a mock of Game interface.
type MockGame struct {
	ctrl     *gomock.Controller
	recorder *MockGameMockRecorder
}

// MockGameMockRecorder is the mock recorder for MockGame.
type MockGameMockRecorder struct {
	mock *MockGame
}

// NewMockGame creates a new mock instance.
func NewMockGame(ctrl *gomock.Controller) *MockGame {
	mock := &MockGame{ctrl: ctrl}
	mock.recorder = &MockGameMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGame) EXPECT() *MockGameMockRecorder {
	return m.recorder
}

// NavigateRover mocks base method.
func (m *MockGame) NavigateRover(size int, obstacles []model.Position, commands string) game.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NavigateRover", size, obstacles, commands)
	ret0, _ := ret[0].(game.Result)
	return ret0
}

// NavigateRover indicates an expected call of NavigateRover.
func (mr *MockGameMockRecorder) NavigateRover(size, obstacles, commands interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NavigateRover", reflect.TypeOf((*MockGame)(nil).NavigateRover), size, obstacles, commands)
}
