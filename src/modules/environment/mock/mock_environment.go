// Code generated by MockGen. DO NOT EDIT.
// Source: environment.go

// Package mock is a generated GoMock package.
package mock

import (
	model "mars-rover-navigation/src/model"
	environment "mars-rover-navigation/src/modules/environment"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEnvironment is a mock of Environment interface.
type MockEnvironment struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentMockRecorder
}

// MockEnvironmentMockRecorder is the mock recorder for MockEnvironment.
type MockEnvironmentMockRecorder struct {
	mock *MockEnvironment
}

// NewMockEnvironment creates a new mock instance.
func NewMockEnvironment(ctrl *gomock.Controller) *MockEnvironment {
	mock := &MockEnvironment{ctrl: ctrl}
	mock.recorder = &MockEnvironmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironment) EXPECT() *MockEnvironmentMockRecorder {
	return m.recorder
}

// CanMove mocks base method.
func (m *MockEnvironment) CanMove(actorPosition model.Position) environment.CanMoveStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanMove", actorPosition)
	ret0, _ := ret[0].(environment.CanMoveStatus)
	return ret0
}

// CanMove indicates an expected call of CanMove.
func (mr *MockEnvironmentMockRecorder) CanMove(actorPosition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanMove", reflect.TypeOf((*MockEnvironment)(nil).CanMove), actorPosition)
}

// GetGrid mocks base method.
func (m *MockEnvironment) GetGrid() [][]model.Cell {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGrid")
	ret0, _ := ret[0].([][]model.Cell)
	return ret0
}

// GetGrid indicates an expected call of GetGrid.
func (mr *MockEnvironmentMockRecorder) GetGrid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGrid", reflect.TypeOf((*MockEnvironment)(nil).GetGrid))
}
