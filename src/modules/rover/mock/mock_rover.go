// Code generated by MockGen. DO NOT EDIT.
// Source: rover.go

// Package mock is a generated GoMock package.
package mock

import (
	model "mars-rover-navigation/src/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRover is a mock of Rover interface.
type MockRover struct {
	ctrl     *gomock.Controller
	recorder *MockRoverMockRecorder
}

// MockRoverMockRecorder is the mock recorder for MockRover.
type MockRoverMockRecorder struct {
	mock *MockRover
}

// NewMockRover creates a new mock instance.
func NewMockRover(ctrl *gomock.Controller) *MockRover {
	mock := &MockRover{ctrl: ctrl}
	mock.recorder = &MockRoverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRover) EXPECT() *MockRoverMockRecorder {
	return m.recorder
}

// GetDirection mocks base method.
func (m *MockRover) GetDirection() model.Direction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirection")
	ret0, _ := ret[0].(model.Direction)
	return ret0
}

// GetDirection indicates an expected call of GetDirection.
func (mr *MockRoverMockRecorder) GetDirection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirection", reflect.TypeOf((*MockRover)(nil).GetDirection))
}

// GetPosition mocks base method.
func (m *MockRover) GetPosition() model.Position {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosition")
	ret0, _ := ret[0].(model.Position)
	return ret0
}

// GetPosition indicates an expected call of GetPosition.
func (mr *MockRoverMockRecorder) GetPosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosition", reflect.TypeOf((*MockRover)(nil).GetPosition))
}

// GetTryMovePosition mocks base method.
func (m *MockRover) GetTryMovePosition() model.Position {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTryMovePosition")
	ret0, _ := ret[0].(model.Position)
	return ret0
}

// GetTryMovePosition indicates an expected call of GetTryMovePosition.
func (mr *MockRoverMockRecorder) GetTryMovePosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTryMovePosition", reflect.TypeOf((*MockRover)(nil).GetTryMovePosition))
}

// Move mocks base method.
func (m *MockRover) Move() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Move")
}

// Move indicates an expected call of Move.
func (mr *MockRoverMockRecorder) Move() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockRover)(nil).Move))
}

// TurnLeft mocks base method.
func (m *MockRover) TurnLeft() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TurnLeft")
}

// TurnLeft indicates an expected call of TurnLeft.
func (mr *MockRoverMockRecorder) TurnLeft() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TurnLeft", reflect.TypeOf((*MockRover)(nil).TurnLeft))
}

// TurnRight mocks base method.
func (m *MockRover) TurnRight() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TurnRight")
}

// TurnRight indicates an expected call of TurnRight.
func (mr *MockRoverMockRecorder) TurnRight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TurnRight", reflect.TypeOf((*MockRover)(nil).TurnRight))
}
